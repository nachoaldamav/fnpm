import path from 'path';
import os from 'os';
import { writeFileSync, readFileSync } from 'node:fs';

const homeDir = os.homedir();

const comms = [
  'install',
  'run',
  'benchmark',
  'create',
  'ls',
  'remove',
  'upgrade',
];

export default function autocompletion() {
  // Generate the autocompletion script for the current shell
  // eslint-disable-next-line turbo/no-undeclared-env-vars
  const shell = process.env.SHELL;
  if (shell) {
    if (shell.endsWith('bash')) {
      const bashPathname = path.join(homeDir, '.bashrc');
      const text = generateBashAutocompletion();

      const content = readFileSync(bashPathname, 'utf8');

      if (!content.includes('ultra autocompletion')) {
        writeFileSync(bashPathname, text, { flag: 'a' });
      }

      return;
    } else if (shell.endsWith('zsh')) {
      const zshPathname = path.join(homeDir, '.zshrc');
      const text = generateZshAutocompletion();

      const content = readFileSync(zshPathname, 'utf8');

      if (!content.includes('ultra autocompletion')) {
        writeFileSync(zshPathname, text, { flag: 'a' });
      }

      return;
    }
  }
  throw new Error('Unsupported shell');
}

function generateBashAutocompletion() {
  // ULTRA Autocompletion script for bash
  return `
# ultra autocompletion script for bash
# Generated by ultra autocompletion

_ultra_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="${comms.join(' ')}"
    COMPREPLY=(\$(compgen -W "\${opts}" -- \${cur}))
    return 0
}
`;
}

function generateZshAutocompletion() {
  // ULTRA Autocompletion script for zsh
  return `
    # ultra autocompletion script for zsh
    # Generated by ultra autocompletion
    
    _ultra_completion() {
        local -a opts
        opts=(${comms.join(' ')})
        _describe "ultra" opts
        return
    }
    `;
}
